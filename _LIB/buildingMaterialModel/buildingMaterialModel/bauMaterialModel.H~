/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     |
    \\  /    A nd           | Copyright (C) 1991-2009 OpenCFD Ltd.
     \\/     M anipulation  |
-------------------------------------------------------------------------------
License
    This file is part of OpenFOAM.

    OpenFOAM is free software; you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by the
    Free Software Foundation; either version 2 of the License, or (at your
    option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM; if not, write to the Free Software Foundation,
    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Namespace
    Foam::bauMaterialModels

Description
    A namespace for various bauMaterialModel implementations.

Class
    Foam::bauMaterialModel

Description
    An abstract base class for bauMaterialModels

    Constitutive relations for bauMaterials: theta(h) and K(h)

SourceFiles
    bauMaterialModel.C
    newbauMaterialModel.C

\*---------------------------------------------------------------------------*/

#ifndef bauMaterialModel_H
#define bauMaterialModel_H

#include "IOdictionary.H"
#include "typeInfo.H"
#include "runTimeSelectionTables.H"
#include "volFieldsFwd.H"
#include "surfaceFieldsFwd.H"
#include "dimensionedScalar.H"
#include "dimensionedTensor.H"
#include "tmp.H"
#include "autoPtr.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

/*---------------------------------------------------------------------------*\
                Class bauMaterialModel Declaration
\*---------------------------------------------------------------------------*/

class bauMaterialModel
{

protected:

    // Protected data

        word name_;
        dictionary bauMaterialProperties_;
        word cellZoneModel_;

        //volScalarField& h_;           //head
        //volScalarField& theta_;       //moisture content
        //volScalarField& kr_;          //relative permeability
        //volScalarField& Ch_;          //specific moisture capacity


    // Private Member Functions

        //- Disallow copy construct
        bauMaterialModel(const bauMaterialModel&);

        //- Disallow default bitwise assignment
        void operator=(const bauMaterialModel&);


public:

    //- Runtime type information
    TypeName("bauMaterialModel");


    // Declare run-time constructor selection table

        declareRunTimeSelectionTable
        (
            autoPtr,
            bauMaterialModel,
            dictionary,
            (
                const word& name,
                const dictionary& bauMaterialProperties,
                const word& cellZoneModel
                //volScalarField& h,
                //volScalarField& theta,
                //volScalarField& kr,
                //volScalarField& Ch
            ),
            (name, bauMaterialProperties, cellZoneModel)//, h, theta, kr, Ch)
        );


    // Selectors

        //- Return a reference to the selected bauMaterial model
        static autoPtr<bauMaterialModel> New
        (
            const word& name,
            const dictionary& bauMaterialProperties,
            const word& cellZoneModel
            //volScalarField& h,
            //volScalarField& theta,
            //volScalarField& kr,
            //volScalarField& Ch
        );


    // Constructors

        //- Construct from components
        bauMaterialModel
        (
            const word& name,
            const dictionary& bauMaterialProperties,
            const word& cellZoneModel
            //volScalarField& h,
            //volScalarField& theta,
            //volScalarField& kr,
            //volScalarField& Ch
        );


    // Destructor

        virtual ~bauMaterialModel()
        {}


    // Member Functions

        //- Return the bauMaterial properties dictionary
        const dictionary& bauMaterialProperties() const
        {
            return bauMaterialProperties_;
        }

        //- Correct the bauMaterial moisture content (cell)
        virtual void update_w_cell(const volScalarField& pc, volScalarField& w, label& celli) = 0;

        //- Correct the bauMaterial moisture content (boundary)
        virtual void update_w_boundary(const volScalarField& pc, volScalarField& w, label patchi, label patchFacei) = 0;

        //- Correct the bauMaterial liquid permeability (cell)
        virtual void update_Krel_cell(const volScalarField& pc, const volScalarField& w, volScalarField& Krel, label& celli) = 0;

        //- Correct the bauMaterial liquid permeability (boundary)
        virtual void update_Krel_boundary(const volScalarField& pc, const volScalarField& w, volScalarField& Krel, label patchi, label patchFacei) = 0;    

        //- Correct the bauMaterial vapor permeability (cell)
        virtual void update_Kv_cell(const volScalarField& pc, const volScalarField& w, volScalarField& Krel, label& celli) = 0;

        //- Correct the bauMaterial vapor permeability (boundary)
        virtual void update_Kv_boundary(const volScalarField& pc, const volScalarField& w, volScalarField& Krel, label patchi, label patchFacei) = 0; 

        //- Correct the bauMaterial vapor permeability (cell)
        virtual void update_Kpt_cell(const volScalarField& pc, const volScalarField& w, volScalarField& Krel, label& celli) = 0;

        //- Correct the bauMaterial vapor permeability (boundary)
        virtual void update_Kpt_boundary(const volScalarField& pc, const volScalarField& w, volScalarField& Krel, label patchi, label patchFacei) = 0;               

        //- Correct the bauMaterial moisture capacity  (cell)
        virtual void update_Crel_cell(const volScalarField& pc, const volScalarField& w, volScalarField& Crel, label& celli) = 0;

        //- Correct the bauMaterial moisture capacity  (boundary)
        virtual void update_Crel_boundary(const volScalarField& pc, const volScalarField& w, volScalarField& Crel, label patchi, label patchFacei) = 0; 

        //- Read transportProperties dictionary
        virtual bool read(const dictionary& bauMaterialProperties) = 0;

        /*virtual dimensionedTensor Ks() = 0;
        virtual dimensionedScalar theta_s() = 0;
        virtual dimensionedScalar Ss() = 0;*/
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
